{"version":3,"sources":["slomux/Context.js","slomux/provider.js","store/actions.js","store/reducer.js","slomux/hooks/useDispatch.js","slomux/hooks/useSelector.js","components/Step.js","components/Counter.js","index.js","slomux/createStore.js"],"names":["React","createContext","Provider","store","children","value","UPDATE_COUNTER","CHANGE_STEP_SIZE","updateCounter","type","payload","defaultState","counter","stepSize","useDispatch","ctx","useContext","SlomuxContext","dispatch","useSelector","selector","SlContext","useState","getState","state","setState","handleChange","useEffect","unsubscribe","subscribe","Step","min","max","onChange","target","Counter","onClick","reducer","initialState","currentState","listeners","action","forEach","listener","push","index","indexOf","splice","createStore","ReactDOM","render","document","getElementById"],"mappings":"0IAEeA,MAAMC,cAAc,M,OCUpBC,EATE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAE1B,OACC,cAAC,EAAUF,SAAX,CAAoBG,MAAO,CAAEF,SAA7B,SACEC,K,OCPSE,EAAiB,iBACjBC,EAAmB,mBAEnBC,EAAgB,SAAAH,GAAK,MAAK,CACtCI,KAAMH,EACNI,QAASL,ICFGM,EAAe,CAC3BC,QAAS,EACTC,SAAU,GCOIC,EATK,WACnB,IAAMC,EAAMf,IAAMgB,WAAWC,GAC7B,OAAKF,EAIEA,EAAIZ,MAAMe,SAHV,c,OCkBOC,EArBK,SAACC,GACpB,IAAML,EAAMf,IAAMgB,WAAWK,GAE7B,EAA0BC,mBAASP,EAAIZ,MAAMoB,YAA7C,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAe,SAACF,GACtBC,EAASD,IAYT,OATAG,qBAAU,WAEV,GAAKZ,EAAL,CACA,IAAMa,EAAcb,EAAIZ,MAAM0B,UAAUH,GACxC,OAAO,WACNE,QAEE,CAACb,IAEGK,EAASI,ICCFM,EAlBF,WACZ,IAAMjB,EAAWM,GAAY,SAAAK,GAAK,OAAIA,EAAMX,YACtCK,EAAWJ,IACjB,OACA,gCACC,sdACA,yJAA6BD,KAC7B,uBACCJ,KAAK,QACLsB,IAAI,IACJC,IAAI,IACJ3B,MAAOQ,EACPoB,SAAU,gBJRiB5B,EIQd6B,EAAH,EAAGA,OAAH,OAAgBhB,GJRCb,EIQuB6B,EAAO7B,MJRpB,CACvCI,KAAMF,EACNG,QAASL,YKMK8B,EAZC,WACf,IAAMvB,EAAUO,GAAY,SAAAK,GAAK,OAAIA,EAAMZ,WACrCM,EAAWJ,IACjB,OACC,gCACC,wBAAQsB,QAAS,kBAAMlB,EAASV,GAAe,KAA/C,eACA,qCAAQI,EAAR,OACA,wBAAQwB,QAAS,kBAAMlB,EAASV,EAAc,KAA9C,mBCFGL,ECTqB,SAACkC,EAASC,GACpC,IAAIC,EAAeD,EACfE,EAAY,GAkBhB,MAAO,CAAEjB,SAhBQ,kBAAMgB,GAgBJrB,SAfF,SAAAuB,GAChBF,EAAeF,EAAQE,EAAcE,GACrCD,EAAUE,SAAQ,SAAAC,GAAQ,OAAIA,EAASJ,OAaXV,UATX,SAACc,GAGlB,OAFAH,EAAUI,KAAKD,GAER,WACN,IAAME,EAAQL,EAAUM,QAAQH,GAChCH,EAAUO,OAAOF,EAAO,MDPbG,ELDS,WAAmC,IAAlCxB,EAAiC,uDAAzBb,EAAc8B,EAAW,uCACxD,OAAOA,EAAOhC,MACd,KAAKH,EACJ,OAAO,2BACHkB,GADJ,IAECZ,QAASY,EAAMZ,QAAU6B,EAAO/B,QAAUc,EAAMX,WAElD,KAAKN,EACJ,OAAO,2BACHiB,GADJ,IAECX,SAAU4B,EAAO/B,aKTeC,GAEnCsC,IAASC,OACR,eAAC,EAAD,CAAU/C,MAAOA,EAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFgD,SAASC,eAAe,W","file":"static/js/main.e941456c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default React.createContext(null) ","import React from 'react';\r\nimport SlContext from './Context';\r\n\r\nconst Provider = ({ store, children }) => {\r\n\r\n\treturn (\r\n\t\t<SlContext.Provider value={{ store }}>\r\n\t\t\t{children}\r\n\t\t</SlContext.Provider>\r\n\t);\t\r\n}\r\n\r\nexport default Provider;","export const UPDATE_COUNTER = 'UPDATE_COUNTER'\r\nexport const CHANGE_STEP_SIZE = 'CHANGE_STEP_SIZE'\r\n\r\nexport const updateCounter = value => ({\r\n\ttype: UPDATE_COUNTER,\r\n\tpayload: value,\r\n})\r\n\r\nexport const changeStepSize = value => ({\r\n\ttype: CHANGE_STEP_SIZE,\r\n\tpayload: value,\r\n})","import { CHANGE_STEP_SIZE, UPDATE_COUNTER } from \"./actions\"\r\n\r\n\r\nexport const defaultState = {\r\n\tcounter: 1,\r\n\tstepSize: 1,\r\n}\r\n\r\nexport const reducer = (state = defaultState, action) => {\r\n\tswitch(action.type) {\r\n\tcase UPDATE_COUNTER: \r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tcounter: state.counter + action.payload * state.stepSize\r\n\t\t}\r\n\tcase CHANGE_STEP_SIZE:\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tstepSize: action.payload\r\n\t\t}\r\n\tdefault:\r\n\t\t{}\r\n\t}\r\n}","import React from 'react';\r\nimport SlomuxContext from '../Context';\r\n\r\nconst useDispatch = () => {\r\n\tconst ctx = React.useContext(SlomuxContext)\r\n\tif (!ctx) {\r\n\treturn () => {}\r\n\t}\r\n\r\n\treturn ctx.store.dispatch\r\n};\r\n\r\nexport default useDispatch;","import React, { useEffect, useState } from 'react';\r\nimport SlContext from '../Context';\r\n\r\nconst useSelector = (selector) => {\r\n\tconst ctx = React.useContext(SlContext)\r\n\r\n\tconst [state, setState] = useState(ctx.store.getState());\r\n\r\n\tconst handleChange = (state) => {\r\n\tsetState(state);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\r\n\tif (!ctx) return;\r\n\tconst unsubscribe = ctx.store.subscribe(handleChange);\r\n\treturn () => {\r\n\t\tunsubscribe();\r\n\t}\r\n\t}, [ctx])\r\n\r\n\treturn selector(state);\r\n}\r\n\r\nexport default useSelector;","import useDispatch from \"../slomux/hooks/useDispatch\"\r\nimport useSelector from \"../slomux/hooks/useSelector\"\r\nimport { changeStepSize } from \"../store/actions\"\r\n\r\nconst Step = () => {\r\n\tconst stepSize = useSelector(state => state.stepSize)\r\n\tconst dispatch = useDispatch()\r\n\treturn (\r\n\t<div>\r\n\t\t<div>Значение счётчика должно увеличиваться или уменьшаться на заданную величину шага</div>\r\n\t\t<div>Текущая величина шага: {stepSize}</div>\r\n\t\t<input\r\n\t\t\ttype=\"range\"\r\n\t\t\tmin=\"1\"\r\n\t\t\tmax=\"5\"\r\n\t\t\tvalue={stepSize}\r\n\t\t\tonChange={({ target }) => dispatch(changeStepSize(target.value))}\r\n\t\t/>\r\n\t</div>\r\n\t)\r\n}\r\n\r\nexport default Step;","import { updateCounter } from \"../store/actions\";\r\nimport useDispatch from \"../slomux/hooks/useDispatch\";\r\nimport useSelector from '../slomux/hooks/useSelector';\r\n\r\nconst Counter = () => {\r\n\tconst counter = useSelector(state => state.counter);\r\n\tconst dispatch = useDispatch();\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<button onClick={() => dispatch(updateCounter(-1))}>-</button>\r\n\t\t\t<span> {counter} </span>\r\n\t\t\t<button onClick={() => dispatch(updateCounter(1))}>+</button>\r\n\t\t</div>\r\n   )\r\n}\r\n\r\nexport default Counter;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Provider from './slomux/provider';\nimport { createStore } from './slomux/createStore';\nimport { defaultState, reducer } from './store/reducer';\nimport Step from './components/Step';\nimport Counter from './components/Counter';\n\nconst store = createStore(reducer, defaultState)\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t\t<Step />\n\t\t\t<Counter />\n\t</Provider>,\n\tdocument.getElementById('root')\n)","export const createStore = (reducer, initialState) => {\r\n\tlet currentState = initialState\r\n\tlet listeners = []\r\n\r\n\tconst getState = () => currentState;\r\n\tconst dispatch = action => {\r\n\t\tcurrentState = reducer(currentState, action)\r\n\t\tlisteners.forEach(listener => listener(currentState))\r\n\t}\r\n\r\n\t\r\n\tconst subscribe = (listener) => {\r\n\t\tlisteners.push(listener)\r\n\r\n\t\treturn function unsubscribe() {\r\n\t\t\tconst index = listeners.indexOf(listener)\r\n\t\t\tlisteners.splice(index, 1)\r\n\t\t}\r\n\t}\r\n\r\n\treturn { getState, dispatch, subscribe }\r\n}"],"sourceRoot":""}